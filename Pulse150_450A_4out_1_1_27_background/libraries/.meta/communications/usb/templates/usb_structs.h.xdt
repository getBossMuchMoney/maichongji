/*
 * Copyright (c) 2021 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

% var moduleName = "usb"
% var module = system.modules['/libraries/communications/usb/' + moduleName + '.js'];
%
%if(module != null)
%{
	% var instance = module.$instances[0];

#ifndef USB_STRUCTS_H
#define USB_STRUCTS_H
//
// Included Files
//
#include <stdbool.h>
#include <stdint.h>
#include "inc/hw_types.h"
#include "usb.h"
#include "usblib.h"
#include "usb_ids.h"

% if ((instance.usb_mode == "Device") || (instance.usb_mode == "Dual"))
%{
#include "device/usbdevice.h"

	% if (instance.deviceClasses == "CDC")
	%{
#include "usbcdc.h"
#include "device/usbdcdc.h"

//
// Defines
//

//
// The size of the transmit and receive buffers used for the redirected SCI.
// This number should be a power of 2 for best performance.  256 is chosen
// pretty much at random though the buffer should be at least twice the size of
// a maximum-sized USB packet.
//
#define `instance.$name`_SCI_BUFFER_SIZE `instance.usbBufferSize`

//
// Globals
//
extern tUSBBuffer `instance.usbCDCTxStruct`;
extern tUSBBuffer `instance.usbCDCRxStruct`;
extern tUSBDCDCDevice `instance.usbCDCDeviceStruct`;
extern uint8_t `instance.usbCDCTxBuffer`[];
extern uint8_t `instance.usbCDCRxBuffer`[];

//
// Function Prototypes
//
extern uint32_t `instance.usbCDCRxHandler`(void *pvCBData, uint32_t ui32Event,
                          uint32_t ui32MsgValue, void *pvMsgData);
extern uint32_t `instance.usbCDCTxHandler`(void *pvi32CBData, uint32_t ui32Event,
                          uint32_t ui32MsgValue, void *pvMsgData);

%}
% else if (instance.deviceClasses == "Mouse")
%{
#include "usbhid.h"
#include "device/usbdhid.h"
#include "device/usbdhidmouse.h"
extern uint32_t `instance.usbMouseHandler`(void *pvCBData, uint32_t ui32Event,
                             uint32_t ui32MsgData, void *pvMsgData);

extern tUSBDHIDMouseDevice `instance.usbMouseDeviceStruct`;

%}
% else if (instance.deviceClasses == "Keyboard")
%{
#include "usbhid.h"
#include "device/usbdhid.h"
#include "device/usbdhidkeyb.h"

//
// Globals
//
extern tUSBDHIDKeyboardDevice `instance.usbKeyboardDeviceStruct`;

//
// Function Prototypes
//
extern uint32_t `instance.usbKeyboardHandler`(void *pvCBData, uint32_t ui32Event,
                                uint32_t ui32MsgData, void *pvMsgData);


%}
% else if (instance.deviceClasses == "Bulk")
%{
#include "device/usbdbulk.h"

//
// Defines
//

//
// The size of the transmit and receive buffers used. 256 is chosen pretty
// much at random though the buffer should be at least twice the size of
// a maximum-sized USB packet.
//
#define `instance.$name`_BULK_BUFFER_SIZE `instance.usbBulkBufferSize`

//
// Globals
//
extern tUSBBuffer `instance.usbBulkTxStruct`;
extern tUSBBuffer `instance.usbBulkRxStruct`;
extern tUSBDBulkDevice `instance.usbBulkDeviceStruct`;
extern uint8_t `instance.usbBulkTxBuffer`[];
extern uint8_t `instance.usbBulkRxBuffer`[];

//
// Function Prototypes
//
extern uint32_t `instance.usbBulkRxHandler`(void *pvCBData, uint32_t ui32Event,
                          uint32_t ui32MsgValue, void *pvMsgData);
extern uint32_t `instance.usbBulkTxHandler`(void *pvi32CBData, uint32_t ui32Event,
                          uint32_t ui32MsgValue, void *pvMsgData);

%}
%}

#endif // USB_STRUCTS_H
%}

//
// End of file 
//
